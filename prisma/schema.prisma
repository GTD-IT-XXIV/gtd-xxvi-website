// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  name        String     @id
  description String
  location    String
  /// Event starting date
  startDate   DateTime
  /// Event ending date
  endDate     DateTime
  bundles     Bundle[]
  timeslots   Timeslot[]
  bookings    Booking[]
  orders      Order[]
}

model Bundle {
  name            String
  /// Bundle terms and conditions
  details         String[]
  price           Decimal
  /// Number of slots this bundle occupies; number of people in this bundle
  quantity        Int
  /// Number of bundles available; bundles are not limited if this is null (might still be limited by timeslots remaining slots)
  remainingAmount Int?
  maxPurchases    Int
  open            DateTime
  close           DateTime
  eventName       String
  bookings        Booking[]
  orders          Order[]
  event           Event     @relation(fields: [eventName], references: [name])

  @@id([name, eventName])
}

model Timeslot {
  startTime      DateTime
  endTime        DateTime
  remainingSlots Int
  eventName      String
  bookings       Booking[]
  orders         Order[]
  event          Event     @relation(fields: [eventName], references: [name])

  @@id([startTime, endTime, eventName])
}

model Booking {
  id             Int      @id @default(autoincrement())
  name           String
  email          String
  telegramHandle String
  phoneNumber    String
  eventName      String
  bundleName     String
  startTime      DateTime
  endTime        DateTime
  /// Names of people to be associated with each ticket. Length of this is the quantity of tickets.
  names          String[]
  created        DateTime @default(now())
  /// Validity of the booking; Stripe webhook will check this; can be manually set to invalidate the booking
  valid          Boolean  @default(true)
  /// Reference for Stripe Session ID; not a foreign key
  sessionId      String?
  event          Event    @relation(fields: [eventName], references: [name])
  bundle         Bundle   @relation(fields: [eventName, bundleName], references: [eventName, name])
  timeslot       Timeslot @relation(fields: [startTime, endTime, eventName], references: [startTime, endTime, eventName])
}

model Order {
  id              String   @id @default(cuid())
  name            String
  email           String
  telegramHandle  String
  phoneNumber     String
  eventName       String
  bundleName      String
  startTime       DateTime
  endTime         DateTime
  created         DateTime @default(now())
  /// Reference for Stripe PaymentIntent ID; not a foreign key
  paymentIntentId String
  tickets         Ticket[]
  event           Event    @relation(fields: [eventName], references: [name])
  bundle          Bundle   @relation(fields: [eventName, bundleName], references: [eventName, name])
  timeslot        Timeslot @relation(fields: [startTime, endTime, eventName], references: [startTime, endTime, eventName])
}

model Ticket {
  id      Int    @id @default(autoincrement())
  name    String
  orderId String

  order Order @relation(fields: [orderId], references: [id])
}

// Lucia
model User {
  id       String  @id @unique
  username String? @unique
  email    String? @unique
  name     String?
  role     Role

  auth_session Session[]
  key          Key[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

enum Role {
  USER
  SCANNER
  DASHBOARD_USER
  ADMIN
}
